{
	"id": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
	"name": "vSphere Automation REST Samples",
	"description": "These samples will show how to use the SHIM API. Each folder will provide a description of what APIs it will show how to use. Along the way, some environment variables will be set as part of some response processing done using Javascript. As well, some environment varialbes will be required, such as the host ip, username and password, etc. Many of the samples will reuse previously set environment variables, so if a request within a sample doesnt work, check the description of the request or the request url, headers and body for any {{ }} tokens and make sure they are available in the selected environment. Below are the environment variables needed to be preset for the samples to work.\n\n* vc - the IP or URL of the host VC\n* user - the user name to log in with\n* password - the password to log in with\n* host1 - a unique ip address to a host\n* host2 - another unique ip address to a host\n",
	"order": [],
	"folders": [
		{
			"id": "fb1ca52e-d2d9-1caf-6734-983cee2c88c9",
			"name": "Host Connect",
			"description": "This set of requests will attempt to connect a host if it is disconnected. It will find the host if it is in a disconnected state, then proceed to connect it.",
			"order": [
				"b569db37-6d8a-099b-a0bd-c1da13e4194d",
				"e3a94207-87a4-32a2-32ed-bdc4303ac921",
				"36665eee-ed3b-2b77-7866-abc9e77dd4f8",
				"9428a397-bda4-8179-ec2a-19aac4059f35"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "986bd781-095c-68d2-78cf-9fc8792c44dd",
			"name": "Host Disconnect",
			"description": "This set of requests will attempt to disconnect a host if it is connected. It will find the host if it is in a connected state, then proceed to disconnect it.",
			"order": [
				"264c4f9a-5ab5-8dac-00dc-ad821a18f60c",
				"08551637-97ed-1bf2-57c8-6fa0cee6e989",
				"07c98e9e-7e08-7eac-9894-2a714c881e1d",
				"2f90dda2-94b1-8707-17ea-67b241107167"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "afebfe49-69c3-09bf-872b-d928645f5690",
			"name": "Host add",
			"description": "This set of requests will add a host to a datacenter",
			"order": [
				"3414f518-eea3-5f77-d0c9-c6a1989efe89",
				"17b5eb69-e3a3-a2cd-40b6-befe96f1f619",
				"8acdc166-2403-807f-fa7a-1fc5c98fbe2f",
				"435c4ae3-5212-4456-f788-9f3c17e1f47d",
				"c52d2133-6c29-b8c0-0041-14c2f76e6af9"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "44cdd8b0-4e8d-8a33-6986-219962c69e52",
			"name": "Host remove",
			"description": "This set of requests will show how to remove a host from a datacenter. It will use the {{host1}} pre configured environment variable, removing it from the datacenter if it exists. ",
			"order": [
				"ddd1adfe-742a-95ea-8681-3aac62e94642",
				"723de728-629d-8d0e-8b25-0eb4afa03acb",
				"5d3489bd-f6da-d390-8bc9-4092d1315ad1",
				"2edaddb0-6e83-8b47-60e9-806fa45ba46f"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "69cac46c-0b82-b3e6-33fe-fca2e7e9a19e",
			"name": "VM Create with Defaults",
			"description": "This sample will show the API resource calls (with details) to make in order to create a VM as simply as possible. It will use the VM sensible defaults for all other details not provided. Their are only 3 environment variables needed. The datastore, the vm folder, and the resource pool",
			"order": [
				"1ce5305c-f77b-0627-92d8-2a81b1d46cc9",
				"9c1798a7-6cb3-d0e9-9805-e99f0624bbbe",
				"366396dd-4fec-08e9-a01b-300d5fa270d4",
				"6691f2eb-bf31-cfe2-53b5-aef7cf2969c0",
				"d722001b-a8ca-c2d3-9719-f857a8f34ebc",
				"97ff3948-76c1-dcb0-144b-76f10723c3c3",
				"d92af6a5-54a4-7a53-58f3-cc116dc68738"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3",
			"name": "VM Create with details",
			"description": "This collection of requests will show how to gather data that is then applied to the VM create resource for more specific VM creation. Storage, resource poolls, hosts, and more will be retrieved.",
			"order": [
				"bbdd4a74-e987-567d-97f5-6111851cf4bc",
				"f7eedd33-421f-202d-3387-16dc08b54210",
				"a4d38843-0c22-a819-1414-46d73fe8f92d",
				"23b35fef-9c84-731c-4917-d18dacb1d3b4",
				"3c7b9f1d-5d19-0284-4655-773756fb22a6",
				"965b9c65-fac3-3cd0-465d-bab1b169247a",
				"474184b7-243c-1e4b-9032-a9d145791eb6"
			],
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "ab4a0b5a-abcc-9cc7-f6c5-11c75166e2b8",
			"name": "VM Power On/Off",
			"description": "This set of requests will show how to turn a VM on and off.",
			"order": [
				"e9fa0fcf-a551-3327-d23d-1248c4c7fc89",
				"8d395360-3a1a-2a1c-d004-854d8e502b0c",
				"4619131b-aae3-84cb-c03d-6cbee2875dec",
				"21ba90f9-6a45-af88-b9ac-0032f491bc5b",
				"2c3afcd6-341e-de73-15c0-15b34ae618cc"
			],
			"owner": "287921",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		}
	],
	"timestamp": 1458664643676,
	"owner": "287921",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "07c98e9e-7e08-7eac-9894-2a714c881e1d",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host/{{Host-1-Name}}/disconnect",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460564894321,
			"name": "Disconnect",
			"description": "Disconnect a connected host",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"rawModeData": ""
		},
		{
			"id": "08551637-97ed-1bf2-57c8-6fa0cee6e989",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}&filter.connection_states.1=CONNECTED",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar host = jsonData.value; \nif (host !== null && host.length > 0) {\n    // set the host name environment variable for the next request to use\n    postman.setEnvironmentVariable('Host-1-Name', host[0].host);\n    postman.setNextRequest('Disconnect');\n} else {\n    // Host must already be connected, or possibly not responding\n    postman.setNextRequest(null);\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460564847139,
			"name": "Find connected host",
			"description": "This request will look for the {{host1}} using the host api filter to also only find it if its connect_state property is set to DISCONNECTED. If found, it will set the environment variable Host-1-Name to the name of the host, and the next request to the Connect request. If the host is already connected or possibly in a not responding state, the next request is set to null to end the flow.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "17b5eb69-e3a3-a2cd-40b6-befe96f1f619",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar host = jsonData.value; \nif (host !== null && host.length <= 0) {\n    // no host found, lets add it... set next request in chain to find the host folder, which is\n    // needed to add the host to the datacenter\n    postman.setNextRequest('Find Host Folder');\n} else {\n    // host is already added, dont proceed\n    console.log('already added');\n    postman.setNextRequest(null);\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460562136949,
			"name": "Check if host exists",
			"description": "First we will get the list of hosts and filter on the {{host1}}",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "1ce5305c-f77b-0627-92d8-2a81b1d46cc9",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460565813849,
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "69cac46c-0b82-b3e6-33fe-fca2e7e9a19e"
		},
		{
			"id": "21ba90f9-6a45-af88-b9ac-0032f491bc5b",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/vm/{{vm}}/power/stop",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460568782876,
			"name": "Power off",
			"description": "This request will turn the {{vm}} off",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "23b35fef-9c84-731c-4917-d18dacb1d3b4",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/resource-pool?filter.names.1=Resources&filter.hosts.1={{host-id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('resource-pool', jsonData.value[0].resource_pool);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461346436879,
			"name": "Find ResourcePool for host1",
			"description": "This call will return a list of resource pools",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"folder": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3"
		},
		{
			"id": "264c4f9a-5ab5-8dac-00dc-ad821a18f60c",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"data": [],
			"dataMode": "params",
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"descriptionFormat": "html",
			"time": 1458080930525,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "986bd781-095c-68d2-78cf-9fc8792c44dd"
		},
		{
			"id": "2c3afcd6-341e-de73-15c0-15b34ae618cc",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028737319,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "ab4a0b5a-abcc-9cc7-f6c5-11c75166e2b8"
		},
		{
			"id": "2edaddb0-6e83-8b47-60e9-806fa45ba46f",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028742436,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "44cdd8b0-4e8d-8a33-6986-219962c69e52"
		},
		{
			"id": "2f90dda2-94b1-8707-17ea-67b241107167",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028742436,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "986bd781-095c-68d2-78cf-9fc8792c44dd"
		},
		{
			"id": "3414f518-eea3-5f77-d0c9-c6a1989efe89",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"data": [],
			"dataMode": "params",
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"descriptionFormat": "html",
			"time": 1458080930525,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "afebfe49-69c3-09bf-872b-d928645f5690"
		},
		{
			"id": "366396dd-4fec-08e9-a01b-300d5fa270d4",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    postman.setEnvironmentVariable('host-id', jsonData.value[0].host);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461346389079,
			"name": "Find Host1",
			"description": "This request will use the /host resource to find {{host1}}.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "36665eee-ed3b-2b77-7866-abc9e77dd4f8",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host/{{Host-1-Name}}/connect",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460564722508,
			"name": "Connect",
			"description": "Connect a disconnected host",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"rawModeData": ""
		},
		{
			"id": "3c7b9f1d-5d19-0284-4655-773756fb22a6",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/folder?filter.type=VIRTUAL_MACHINE&filter.names.1=Discovered virtual machine",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('vm-folder', jsonData.value[0].folder);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461345844291,
			"name": "Find VM Folder",
			"description": "This request uses the /folders resource to find the folder by the name of 'vm'. If found, it sets an environment variable {vm-folder} to the folder value of the response.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"folder": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3"
		},
		{
			"id": "435c4ae3-5212-4456-f788-9f3c17e1f47d",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/host",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar host = jsonData.value;\npostman.setEnvironmentVariable(\"Host-1-Name\", host);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459372647178,
			"name": "Add host to datacenter",
			"description": "This request will use the previously set {{Testbed-Host-Folder}} environment variable from the Find Host Folder request, as well as the {{host1}} environment variable to add {{host1}} to the datacenteer.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"folder": "afebfe49-69c3-09bf-872b-d928645f5690",
			"rawModeData": "{\n    \"spec\": {\n        \"force_add\": true,\n        \"folder\": \"{{Testbed-Host-Folder}}\",\n        \"hostname\": \"{{host1}}\",\n        \"user_name\": \"root\",\n        \"password\": \"\",\n        \"port\": 443,\n        \"thumbprint_verification\": \"NONE\"\n    }\n}"
		},
		{
			"id": "4619131b-aae3-84cb-c03d-6cbee2875dec",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/vm/{{vm}}/power/start",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460568749103,
			"name": "Power on",
			"description": "This request will turn the VM on",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "474184b7-243c-1e4b-9032-a9d145791eb6",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028737319,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": []
		},
		{
			"id": "5d3489bd-f6da-d390-8bc9-4092d1315ad1",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/host/{{Host-1-Name}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459372582131,
			"name": "Remove Host",
			"description": "This request will attempt to remove {{host1}}. If the host exists, it should be removed. If not, the request will fail.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"folder": "44cdd8b0-4e8d-8a33-6986-219962c69e52",
			"rawModeData": ""
		},
		{
			"id": "6691f2eb-bf31-cfe2-53b5-aef7cf2969c0",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/resource-pool?filter.names.1=Resources&filter.hosts.1={{host-id}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('resource-pool', jsonData.value[0].resource_pool);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461346436879,
			"name": "Find ResourcePool for host1",
			"description": "This call will return a list of resource pools",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "723de728-629d-8d0e-8b25-0eb4afa03acb",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar host = jsonData.value; \nif (host !== null && host.length == 1) {\n    postman.setEnvironmentVariable('Host-1-Name', host[0].host);\n    postman.setNextRequest('Remove Host');\n} else {\n    // doesnt exist, dont continue\n    postman.setNextRequest(null);\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460563440829,
			"name": "Check if host exists",
			"description": "First we will get the list of hosts and filter on the {{host1}}. If the {{host1}} is found, the environment variable ",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "8acdc166-2403-807f-fa7a-1fc5c98fbe2f",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/datacenter/{datacenter}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nconsole.log(jsonData);\nvar value = jsonData.value;\n\npostman.setEnvironmentVariable(\"Testbed-Host-Folder\", value.host_folder);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463675721841,
			"name": "Find Host Folder",
			"description": "This call will list the folders and look for the host folder name, assigning it to an environment variable for the next call to use.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "8d395360-3a1a-2a1c-d004-854d8e502b0c",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/vm?filter.names.1=SampleVM",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar vm = jsonData.value; \nif (vm !== null && vm.length == 1) {\n    // Found the VM by name, lets figure out its current state, and set the next request to be\n    // called. Also set the {{vm}} environment variable to the vm value.\n    postman.setEnvironmentVariable('vm', vm[0].vm);\n    \n    if (vm[0].power_state === 'POWERED_ON') {\n        postman.setNextRequest('Power off');\n    } else {\n        postman.setNextRequest('Power on');\n    }\n} else {\n    // could not find VM\n    postman.setNextRequest(null);\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464045281550,
			"name": "Find by name",
			"description": "Find a VM by using the name the VM was created with",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "9428a397-bda4-8179-ec2a-19aac4059f35",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028742436,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "fb1ca52e-d2d9-1caf-6734-983cee2c88c9"
		},
		{
			"id": "965b9c65-fac3-3cd0-465d-bab1b169247a",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/vm",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1464044966450,
			"name": "Create detailed VM",
			"description": "Create a VM with specific properties defined.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"rawModeData": "{\n    \"spec\": {\n        \"name\": \"SampleVM\",\n        \"guest_OS\": \"RHEL_7_64\",\n        \"placement\" : {\n            \"datastore\": \"{{datastore}}\",\n            \"folder\": \"{{vm-folder}}\",\n            \"resource_pool\": \"{{resource-pool}}\"\n        },\n        \"memory\": {\n          \"size_MiB\": 4,\n          \"hot_add_enabled\": true\n        },\n        \"floppies\": [],\n        \"cpu\": {\n          \"hot_remove_enabled\": true,\n          \"count\": 1,\n          \"hot_add_enabled\": true,\n          \"cores_per_socket\": 1\n        },\n        \"cdroms\": [\n            {\n                \"type\": \"IDE\",\n                \"backing\": {\n                    \"iso_file\": \"[datastore1] photon-minimal-1.0TP2.iso\",\n                    \"type\": \"ISO_FILE\"\n                }\n            }\n        ],\n        \"disks\": [\n            {\n                \"new_vmdk\": {\n                    \"capacity\": 1024\n                }\n            }\n        ]\n    }\n}"
		},
		{
			"id": "97ff3948-76c1-dcb0-144b-76f10723c3c3",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/vm",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461080916551,
			"name": "Create with defaults",
			"description": "Create a new VM with the bare minimum properties. All other properties will use sensible defaults. The 3 properties that MUST be defined in environment variables before this call will work are {{datastore}}, {{vm-folder}} and {{resource-pool}}.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"rawModeData": "{\n    \"spec\": {\n        \"guest_OS\": \"RHEL_7_64\",\n        \"placement\" : {\n            \"datastore\": \"{{datastore}}\",\n            \"folder\": \"{{vm-folder}}\",\n            \"resource_pool\": \"{{resource-pool}}\"\n        }\n    }\n}"
		},
		{
			"id": "9c1798a7-6cb3-d0e9-9805-e99f0624bbbe",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/datastore?filter.names.1=datastore1",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('datastore', jsonData.value[0].datastore);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461342792630,
			"name": "Find Datastore",
			"description": "This request will use a filter to match the name of the datastores to 'datastore1'. If found, an environment variable {datastore} is set to the datastore value of the response.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"rawModeData": "{\r\n    \"spec\": {\r\n        \"name\": \"datastore1\"\r\n    }\r\n}"
		},
		{
			"id": "a4d38843-0c22-a819-1414-46d73fe8f92d",
			"headers": "",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    postman.setEnvironmentVariable('host-id', jsonData.value[0].host);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461346389079,
			"name": "Find Host1",
			"description": "This request will use the /host resource to find {{host1}}.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"folder": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3"
		},
		{
			"id": "b569db37-6d8a-099b-a0bd-c1da13e4194d",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"data": [],
			"dataMode": "params",
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"descriptionFormat": "html",
			"time": 1458080930525,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "fb1ca52e-d2d9-1caf-6734-983cee2c88c9"
		},
		{
			"id": "bbdd4a74-e987-567d-97f5-6111851cf4bc",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460565813849,
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3"
		},
		{
			"id": "c52d2133-6c29-b8c0-0041-14c2f76e6af9",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028742436,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "afebfe49-69c3-09bf-872b-d928645f5690"
		},
		{
			"id": "d722001b-a8ca-c2d3-9719-f857a8f34ebc",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/folder?filter.type=VIRTUAL_MACHINE&filter.names.1=Discovered virtual machine",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('vm-folder', jsonData.value[0].folder);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461345844291,
			"name": "Find VM Folder",
			"description": "This request uses the /folders resource to find the folder by the name of 'vm'. If found, it sets an environment variable {vm-folder} to the folder value of the response.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "d92af6a5-54a4-7a53-58f3-cc116dc68738",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1466028742436,
			"name": "Logout",
			"description": "Logout",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": []
		},
		{
			"id": "ddd1adfe-742a-95ea-8681-3aac62e94642",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"data": [],
			"dataMode": "params",
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"descriptionFormat": "html",
			"time": 1458080930525,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Response time is less than 1000ms\"] = responseTime < 1000;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"folder": "44cdd8b0-4e8d-8a33-6986-219962c69e52"
		},
		{
			"id": "e3a94207-87a4-32a2-32ed-bdc4303ac921",
			"headers": "Accept: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/host?filter.names.1={{host1}}&filter.connection_states.1=DISCONNECTED",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar host = jsonData.value; \nif (host !== null && host.length > 0) {\n    // set the host name environment variable for the next request to use\n    postman.setEnvironmentVariable('Host-1-Name', host[0].host);\n    postman.setNextRequest('Connect');\n} else {\n    // Host must already be connected, or possibly not responding\n    postman.setNextRequest(null);\n}\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1463604490036,
			"name": "Find disconnected host",
			"description": "This request will look for the {{host1}} using the host api filter to also only find it if its connect_state property is set to DISCONNECTED. If found, it will set the environment variable Host-1-Name to the name of the host, and the next request to the Connect request. If the host is already connected or possibly in a not responding state, the next request is set to null to end the flow.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133"
		},
		{
			"id": "e9fa0fcf-a551-3327-d23d-1248c4c7fc89",
			"headers": "Authorization: Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOkFkbWluITIz\n",
			"url": "https://{{vc}}/rest/com/vmware/cis/session",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460565813849,
			"name": "Login",
			"description": "Login to vCenter API and retrieve Session using username and password. The environment variables user and password are passed via the Authorization header using Basic Auth. The result is the session value, which is the same value stored in the cookie. Postman automatically manages the cookie and sends it on subsequent requests but it is also possible to add a header to send the cookie using the value returned from this call.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "ab4a0b5a-abcc-9cc7-f6c5-11c75166e2b8"
		},
		{
			"id": "f7eedd33-421f-202d-3387-16dc08b54210",
			"headers": "Content-Type: application/json\n",
			"url": "https://{{vc}}/rest/vcenter/datastore?filter.names.1=datastore1",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\n\nif (undefined !== jsonData && null !== jsonData) {\n    console.log(jsonData.value);\n    postman.setEnvironmentVariable('datastore', jsonData.value[0].datastore);\n}",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461342792630,
			"name": "Find Datastore",
			"description": "This request will use a filter to match the name of the datastores to 'datastore1'. If found, an environment variable {datastore} is set to the datastore value of the response.",
			"collectionId": "5c5259d6-375a-7d63-01c4-7cb7a11e9133",
			"responses": [],
			"folder": "196f7fbc-51c7-b0a6-61d3-eb4383b3c9a3",
			"rawModeData": "{\r\n    \"spec\": {\r\n        \"name\": \"datastore1\"\r\n    }\r\n}"
		}
	]
}